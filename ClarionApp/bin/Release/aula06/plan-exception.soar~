# Execute the current plan when impasse states related to no enough jewel in vision to complete the plan
sp {plan*current*execute*impasse
   (state <s> ^attribute state
              ^impasse no-change
              ^superstate <ss>)
   (<ss> ^io <io>
         ^planning <planning>)
   (<io> ^output-link <ol>)
   (<planning> ^steps <steps>)
   (<steps> ^step <step>)
   (<step> ^STEP-NUM 1.0)
   (<step> ^COMMAND <cmd>)
   (<step> ^TYPE <type>)
   (<step> ^DESC <desc>)
-->
   (<ol> ^<type> <cmd>)
   (write (crlf) |>>>Apply<<< Alternative plan started | <desc> )
   (halt)
}

# Wander in case of no planning and impasse state
sp {wander*impasse*no*planning
   (state <s> ^attribute state
              ^impasse no-change
              ^superstate <ss>)
   (<ss> ^io <io>
         ^planning <planning>)
   (<planning> ^steps <steps>)
  -(<steps> ^step <step>)
   (<io> ^output-link <ol>)
-->
   (<ol> ^MOVE <command>)
   (<command> ^Vel 0)
   (<command> ^VelR 2)
   (<command> ^VelL 0)
   (write (crlf) |>>>No enough Jewel<<< Rotating| )
   (halt)
}

# Eat food - exception
sp {food*eat
   (state <s> ^creature <creature>
             -^success <d>
              ^io <io>)
   (<io> ^output-link <ol>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE FOOD)
   (<entity> ^DISTANCE <foodDistance> < 50)
   (<entity> ^NAME <foodName>)
-->
   (<ol> ^EAT <command>)
   (<command> ^Name <foodName>)
   (write (crlf) |>>>EAT FOOD<<<|)
   (interrupt)
}
# Hide jewel - exception
sp {jewel*hide
   (state <s> ^creature <creature>
              ^io <io>)
   (<io> ^output-link <ol>)
   (<creature> ^LEAFLETS <lf>
               ^SENSOR.VISUAL.ENTITY <entity>)
   (<lf> ^JEWEL-OUT-OF-SCOPE <scope>)
   (<scope> ^JEWEL-COLOR <listColors>)
   (<entity> ^NAME <jewelName>)
   (<entity> ^TYPE JEWEL)
   (<entity> ^COLOR <listColors>)
   (<entity> ^DISTANCE <jewelDistance> < 30)
-->
   (<ol> ^HIDE <command>)
   (<command> ^Name <jewelName>)
   (write (crlf) |>>>HIDE JEWEL<<<| <listColors> | Jewel Name| <jewelName>)
   (interrupt)
}

### Remove wander ###
#Propose
sp {wander*propose*remove
   (state <s> ^planning <planning>
             -^impasse no-change)
   (<planning> ^steps <steps>)
  -(<steps> ^step <step>)
   (<s> ^io <io>)
   (<io> ^output-link <ol>)
   (<ol> ^MOVE <command>)
   (<command> ^Vel 0)
   (<command> ^VelR 2)
   (<command> ^VelL 0)
-->
   (<s> ^operator <o>)
   (<o> ^name remWander)
   (write (crlf) |>>>Propose<<< Remove Wander| )
}
   
#Apply
sp {wander*apply*remove
   (state <s> ^planning <planning>
             -^impasse no-change)
   (<s> ^operator <o>)
   (<o> ^name remWander)
   (<s> ^io <io>)
   (<io> ^output-link <ol>)
   (<ol> ^MOVE <command>)
   (<command> ^Vel 0)
   (<command> ^VelR 2)
   (<command> ^VelL 0)
-->
   (<ol> ^MOVE <command> -)
   (write (crlf) |>>>Apply<<< Remove Wander| )
}



